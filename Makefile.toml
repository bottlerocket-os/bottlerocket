[config]
skip_core_tasks = true

[env]
BUILDSYS_ARCH = { script = ["uname -m"] }
BUILDSYS_ROOT_DIR = "${CARGO_MAKE_WORKING_DIRECTORY}"
BUILDSYS_OUTPUT_DIR = "${BUILDSYS_ROOT_DIR}/build"
BUILDSYS_SOURCES_DIR = "${BUILDSYS_ROOT_DIR}/workspaces"
BUILDSYS_BUILDKIT_CLIENT = "moby/buildkit:v0.6.2"
BUILDSYS_BUILDKIT_SERVER = "tcp://127.0.0.1:1234"
BUILDSYS_TIMESTAMP = { script = ["date +%s"] }
CARGO_HOME = "${BUILDSYS_ROOT_DIR}/.cargo"
CARGO_MAKE_CARGO_ARGS = "--jobs 8 --offline --locked"
GO_MOD_CACHE = "${BUILDSYS_ROOT_DIR}/.gomodcache"

[env.development]
IMAGE = "aws-k8s"
BUILDSYS_ALLOW_UPSTREAM_SOURCE_URL = "true"

[tasks.setup]
dependencies = [ "setup-build-dirs", "setup-buildkitd" ]

[tasks.setup-build-dirs]
script = [
'''
mkdir -p ${BUILDSYS_OUTPUT_DIR}
mkdir -p ${GO_MOD_CACHE}
'''
]

[tasks.setup-buildkitd]
# Only run if there's not a buildkitd already running.
condition_script = [
'''
set +e
docker run --rm \
       --network host \
       --entrypoint /usr/bin/buildctl ${BUILDSYS_BUILDKIT_CLIENT} \
       --addr ${BUILDSYS_BUILDKIT_SERVER} \
       --timeout 1 \
       debug workers >/dev/null 2>&1
test "$?" -ne 0
'''
]
install_script = [
'''
docker inspect -f "buildkitd using image: {{index .RepoTags 0}}" ${BUILDSYS_BUILDKIT_CLIENT} 2>/dev/null \
  || docker pull ${BUILDSYS_BUILDKIT_CLIENT}
'''
]
script = [
'''
printf "buildkitd container: "
docker inspect -f "{{.ID}}" buildkitd 2>/dev/null \
  || docker run -d --name buildkitd \
       --rm \
       --network host \
       --volume /var/run/docker.sock:/var/run/docker.sock:ro \
       --privileged \
       ${BUILDSYS_BUILDKIT_CLIENT} \
       --addr ${BUILDSYS_BUILDKIT_SERVER}\
       --oci-worker true
'''
]

[tasks.fetch]
dependencies = ["setup"]
script = [
'''
for ws in workspaces packages images ; do
  cargo fetch --locked --manifest-path ${ws}/Cargo.toml
done
chmod o+r -R ${CARGO_HOME}

cd ${BUILDSYS_SOURCES_DIR}/host-ctr/cmd/host-ctr
docker run --rm \
  -e GOPRIVATE='*' \
  -e GOCACHE='/tmp/.cache' \
  --user $(id -u):$(id -g) \
  -v "${GO_MOD_CACHE}":/go/pkg/mod \
  -v "$PWD":/usr/src/host-ctr -w /usr/src/host-ctr \
  golang:1.12.5 /bin/bash -c "go list -mod=readonly ./... >/dev/null && go mod vendor"
'''
]

[tasks.build-packages]
dependencies = ["setup", "fetch"]
script = [
'''
cargo build \
  ${CARGO_BUILD_ARGS} \
  ${CARGO_MAKE_CARGO_ARGS} \
  --manifest-path packages/Cargo.toml \
  --all
'''
]

[tasks.world-packages]
dependencies = ["setup", "fetch"]
script = [
'''
cargo build \
  ${CARGO_BUILD_ARGS} \
  ${CARGO_MAKE_CARGO_ARGS} \
  --manifest-path packages/Cargo.toml \
  --all --all-features
'''
]

[tasks.build-images]
dependencies = ["build-packages"]
script = [
'''
cargo build \
  ${CARGO_BUILD_ARGS} \
  ${CARGO_MAKE_CARGO_ARGS} \
  --manifest-path images/Cargo.toml \
  --package ${IMAGE}
'''
]

[tasks.world-images]
dependencies = ["world-packages"]
script = [
'''
cargo build \
  ${CARGO_BUILD_ARGS} \
  ${CARGO_MAKE_CARGO_ARGS} \
  --manifest-path images/Cargo.toml \
  --package ${IMAGE}
'''
]

[tasks.check-licenses]
dependencies = ["fetch"]
script = [
'''
(cd workspaces && cargo deny check)
(cd tools/buildsys && cargo deny check)
'''
]

[tasks.build]
dependencies = [
    "build-images",
    "check-licenses",
]

[tasks.world]
dependencies = [
    "world-images",
    "check-licenses",
]

[tasks.clean]
script = [
'''
for ws in workspaces packages images ; do
  cargo clean --manifest-path ${ws}/Cargo.toml
done
for ext in rpm tar lz4 img ; do
  rm -f ${BUILDSYS_OUTPUT_DIR}/*.${ext}
done
'''
]

[tasks.default]
alias = "build"
