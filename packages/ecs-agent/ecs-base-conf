[required-extensions]
autoscaling = "v1"
container-registry = "v1"
os = "v1"
std = { version = "v1", helpers = ["default", "negate_or_else"] }
ecs = { version = "v1", helpers = ["ecs_metadata_service_limits"] }
+++
# Configurations set through the API; default values match the default values in the agent
[Service]
Environment=ECS_AWSVPC_BLOCK_IMDS="{{default "false" settings.ecs.awsvpc-block-imds}}"
Environment=ECS_BACKEND_HOST="{{default "" settings.ecs.backend-host}}"
Environment=ECS_CONTAINER_STOP_TIMEOUT="{{default "30s" settings.ecs.container-stop-timeout}}"
Environment=ECS_CLUSTER="{{default "" settings.ecs.cluster}}"
Environment=ECS_ENABLE_CONTAINER_METADATA="{{default "false" settings.ecs.enable-container-metadata}}"
Environment=ECS_ENABLE_SPOT_INSTANCE_DRAINING="{{default "false" settings.enable-spot-instance-draining}}"
Environment=ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION="{{default "3h" settings.ecs.task-cleanup-wait}}"
Environment=ECS_IMAGE_CLEANUP_INTERVAL="{{default "30m" settings.ecs.image-cleanup-wait}}"
Environment=ECS_IMAGE_MINIMUM_CLEANUP_AGE="{{default "1h" settings.ecs.image-cleanup-age}}"
Environment=ECS_IMAGE_PULL_BEHAVIOR="{{default "default" settings.ecs.image-pull-behavior}}"
Environment=ECS_LOGLEVEL="{{settings.ecs.loglevel}}"
Environment=ECS_NUM_IMAGES_DELETE_PER_CYCLE="{{default 5 settings.ecs.image-cleanup-delete-per-cycle}}"
Environment=ECS_RESERVED_MEMORY="{{default 0 settings.ecs.reserved-memory}}"
Environment=ECS_TASK_METADATA_RPS_LIMIT="{{ecs_metadata_service_limits settings.ecs.metadata-service-rps settings.ecs.metadata-service-burst}}"
Environment=ECS_WARM_POOLS_CHECK="{{default "false" settings.autoscaling.should-wait}}"

# Boolean configurations whose values are inverted in the API
Environment=ECS_PRIVILEGED_DISABLED="{{negate_or_else true settings.ecs.allow-privileged-containers}}"
Environment=ECS_DISABLE_IMAGE_CLEANUP="{{negate_or_else false settings.ecs.image-cleanup-enabled}}"

Environment=ECS_INSTANCE_ATTRIBUTES='{ "bottlerocket.variant": "{{os.variant_id}}"
    {{~#if settings.ecs.instance-attributes~}}
    {{~#each settings.ecs.instance-attributes}} ,"{{@key}}": "{{this}}" {{~/each~}}
    {{~/if~}}}'

{{#if settings.ecs.logging-drivers }}
Environment=ECS_AVAILABLE_LOGGING_DRIVERS='[
    {{~#each settings.ecs.logging-drivers~}}
    {{~#unless @first~}}, {{~/unless~}}
    "{{this}}"
    {{~/each~}}]'
{{/if}}

{{#if settings.container-registry.credentials~}}
Environment=ECS_ENGINE_AUTH_TYPE=dockercfg

Environment=ECS_ENGINE_AUTH_DATA='{
    {{~#each settings.container-registry.credentials~}}
    {{~#unless @first~}},{{~/unless~}}
    {{~#if (eq registry "docker.io" )~}}
    "https://index.docker.io/v1/":
    {{~else~}}
    "{{registry}}":
    {{~/if~}}
    {"email": "."
        {{~#if auth~}},"auth": "{{{auth}}}"{{/if}}
        {{~#if username~}},"username": "{{{username}}}"{{/if}}
        {{~#if password~}},"password": "{{{password}}}"}{{/if}}
    {{~/each~}}}}'
{{/if}}
