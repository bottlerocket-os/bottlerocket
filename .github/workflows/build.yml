name: Build
on:
  pull_request:
    branches: [develop]
    # Here we list file types that don't affect the build and don't need to use
    # up our Actions runners.
    paths-ignore:
      # draw.io (diagrams.net) files, the source of png images for docs
      - '**.drawio'
      # Example configuration files
      - '**.example'
      # Markdown documentation
      - '**.md'
      # Images for documentation
      - '**.png'
      # Templates for README files
      - '**.tpl'
      # Sample config files and OpenAPI docs
      - '**.yaml'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  # When Go packages are built, buildsys will vendor in dependent Go code for
  # that package and bundle it up in a tarball. This env variable is consumed
  # and used to configure Go to directly download code from its upstream source.
  # This is a useful early signal during GitHub actions to see if there are
  # upstream Go code problems.
  GOPROXY: direct

jobs:
  list-variants:
    if: github.repository == 'bottlerocket-os/bottlerocket'
    runs-on: ubuntu-latest
    outputs:
      variants: ${{ steps.get-variants.outputs.variants }}
    steps:
      - uses: actions/checkout@v3
      - id: get-variants
        name: Determine variants
        run: |
          cd variants
          output="variants=$(ls -d */ | cut -d'/' -f 1 | grep -v shared | grep -v target | jq -R -s -c 'split("\n")[:-1]')"
          echo $output
          echo $output >> $GITHUB_OUTPUT

  build:
    needs: list-variants
    runs-on:
      group: bottlerocket
      labels: bottlerocket_ubuntu-latest_32-core
    continue-on-error: true
    strategy:
      matrix:
        variant: ${{ fromJson(needs.list-variants.outputs.variants) }}
        arch: [x86_64, aarch64]
        exclude:
          - variant: aws-dev
            arch: aarch64
          - variant: vmware-dev
            arch: aarch64
          - variant: metal-dev
            arch: aarch64
      fail-fast: false
    steps:
      - name: License check
        run: |
          nvidia=${{ contains(matrix.variant, 'nvidia') }}
          echo "nvidia=$nvidia" >> "GITHUB_ENV"
          echo "nvidia=$nvidia"
      - name: Preflight step to set up the runner
        run: |
          echo "OS_ARCH=`uname -m`" >> $GITHUB_ENV
          sudo apt -y install build-essential openssl libssl-dev pkg-config liblz4-tool
      - uses: actions/checkout@v3
      # Cache `cargo-make`, `cargo-cache`, `cargo-sweep`
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
          key: ${{ hashFiles('.github/workflows/cache.yml') }}-${{ runner.os }}-${{ env.OS_ARCH }}
      # Cache first-party rust code crate dependencies
      - uses: actions/cache@v3
        with:
          path: |
            .cargo
          key: ${{ hashFiles('.github/workflows/cache.yml') }}-${{ runner.os }}-${{ env.OS_ARCH }}-${{ hashFiles('sources/Cargo.lock') }}-${{ hashFiles('.github/workflows/build.yml') }}
          restore-keys: |
            ${{ hashFiles('.github/workflows/cache.yml') }}-${{ runner.os }}-${{ env.OS_ARCH }}-${{ hashFiles('sources/Cargo.lock') }}
      # Cache 'tools/' dependencies and build artifacts
      - uses: actions/cache@v3
        with:
          path: |
            tools/bin
            tools/.crates.toml
            tools/.crates2.json
            tools/target
          key: ${{ hashFiles('.github/workflows/cache.yml') }}-${{ runner.os }}-${{ env.OS_ARCH }}-${{ hashFiles('tools/Cargo.lock') }}-${{ hashFiles('.github/workflows/build.yml') }}
          restore-keys: |
            ${{ hashFiles('.github/workflows/cache.yml') }}-${{ runner.os }}-${{ env.OS_ARCH }}-${{ hashFiles('tools/Cargo.lock') }}
      - run: rustup component add rustfmt
      - run: cargo install --version 0.36.0 cargo-make
      - run: cargo install --version 0.6.2 cargo-sweep
      - run: |
          cargo sweep -i -r tools/
          cargo sweep -t 7 -r tools/
      - if: contains(matrix.variant, 'nvidia')
        run: |
          cat <<-EOF > Licenses.toml
          [nvidia]
          spdx-id = "LICENSE-LicenseRef-NVIDIA-Customer"
          licenses = [
            { path = "NVIDIA", license-url = "https://www.nvidia.com/en-us/drivers/nvidia-license/" }
          ]
          EOF
      - run: cargo make -e BUILDSYS_VARIANT=${{ matrix.variant }} unit-tests
      - run: cargo make -e BUILDSYS_VARIANT=${{ matrix.variant }} check-fmt
      # Avoid running Go lint check via `cargo make check-lints` since there's a separate golangci-lint workflow
      - run: cargo make -e BUILDSYS_VARIANT=${{ matrix.variant }} check-clippy
      - run: cargo make -e BUILDSYS_VARIANT=${{ matrix.variant }} check-shell
      - run: |
          cargo make -e BUILDSYS_VARIANT=${{ matrix.variant }} \
            -e BUILDSYS_ARCH=${{ matrix.arch }} \
            -e BUILDSYS_JOBS=12 \
            -e BUILDSYS_UPSTREAM_SOURCE_FALLBACK="$nvidia" \
            -e BUILDSYS_UPSTREAM_LICENSE_FETCH="$nvidia"
